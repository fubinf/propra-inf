- Legen sie im Hauptverzeichnis des ProPra ein neues Unterverzeichnis
  `.vscode` an.
- Legen sie eine Datei `task.json` an mit folgendem Inhalt:
```json
{
    "tasks": [
        {
            "type": "cppbuild",
            "label": "C: gcc build and run active file",
            "command": "/usr/bin/gcc",
            "args": [
                "-fdiagnostics-color=always",
                "-std=c17",
                "-O0",
                "-g3",
                "-Wall",
                "-Wextra",
                "-Wconversion",
                "-Wdouble-promotion",
                "-Wno-unused-parameter",
                "-Wno-unused-function",
                "-pedantic",
                "-lc",
                "${fileDirname}/**.c",
                "-o",
                "${fileDirname}/${fileBasenameNoExtension}"
            ],
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "Task generated by User."
        }
    ],
    "version": "2.0.0"
}
```
  Dies ermöglicht es Ihnen, eine .c Datei über den Run-Button rechts oben (
  Dreieck, neben dem Zahnrad) zu bauen und auszuführen.  
  Sofern nicht in den Aufgaben anders aufgeführt nutzen Sie diesen Weg um Ihre
  C Programme zu bauen und auszuführen.

  In [PARTREF::C_CompilerAssemblerLinker] werden Sie den Compiler etwas näher
  betrachten, allerdings ohne die Flaggen die hier verwendet wurden.
  Damit Sie dennoch wissen was die tun:

  - `-fdiagnostics-color=always`: Immer farbige Fehlermeldungen. Gabs früher
    nicht und macht das Lesen der Warnungen/Fehler bedeutend einfacher.
  - `-std=C17`: Sagt dem Compiler das wir im C17 Standard schreiben. Ohne dies
    würden Spracheigenschaften die mit C17 eingeführt wurden nicht
    funktionieren.
  - `-O0`: Setzte die Optimierungsstufe auf 0. Der Compiler optimiert also
    nichts.
  - `-g3`: Setzt die Debuggersymbolstufe auf 3. Es werden die meisten Symbole
    für das Debugging bereitgestellt. Ohne diese wird das Debuggen eine Qual.
    Sie würden zwar die Assembly Befehle sehen, aber keinerlei Verknüpfung
    mit dem Code.
  - `-Wall`: Aktiviert "alle" Warnungen. Sind in Wahrheit nicht alle, aber sehr
    viele.
  - `-Wextra`: Aktiviert noch mehr Warnungen.
  - `-Wconversion`: Aktiviert Warnungen bei unabsichtlichem Konvertieren
    zwischen Datentypen.
  - `-Wdouble-promotion`: Aktiviert Warnungen vor unbeabsichtigtem vergrößern
    eines 32-Bit `float`zu einem 64-Bit `double`.
  - `-Wno-unused-parameter`: Deaktiviert die Warnung vor ungenutzten
    Funktionsparametern. diese Warnung wird von `-Wall`aktiviert, wird aber
    meist als zu nervig betrachtet.
  - `-Wno-unused-function`: Deaktiviert die Warnung vor ungenutzten Funktionen.
    Wie auch schon bei `-Wno-unused-parameter` etwas zu nervig.
  -`pedantic`: Aktiviert Warnungen vor dem Nichteinhalten des C17 Standards.
  - `-lc`: Teilt dem Linker mit, das die libc Standardbibliothek gelinkt werden
    soll.
  - "${fileDirname}/**.c": Das sind alle Dateien die Sie Bauen möchten.
    Diese Anweisung nimmt alle `.c` Dateien in den Bauvorgang mit auf.
  - `-o`: Das setzt nur den Namen der Ausgabe. Ohne das würde jedes Programm
    welches `gcc` baut `a.out` heißen.
  - `${fileDirname}/${fileBasenameNoExtension}`: Parameter für `-o`